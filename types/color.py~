import colorsys

class ColorFactory:
    def __init__(self, *args):
        print args

    def RGBfromHSV(self, H, S, V):
        return colorsys.hsv_to_rgb(h, s, v)

    def RGBToHTMLColor(self, rgb_tuple):
        """ convert an (R, G, B) tuple to #RRGGBB """
        hexcolor = '#%02x%02x%02x' % rgb_tuple
        return hexcolor

    def HTMLColorToRGB(self, colorstring):
        """ convert #RRGGBB to an (R, G, B) tuple """
        colorstring = colorstring.strip()
        if colorstring[0] == '#': colorstring = colorstring[1:]
        if len(colorstring) != 6:
            raise ValueError, "input #%s is not in #RRGGBB format" % colorstring
        r, g, b = colorstring[:2], colorstring[2:4], colorstring[4:]
        r, g, b = [int(n, 16) for n in (r, g, b)]
        return (r, g, b)

    def HTMLColorToPILColor(self, colorstring):
        """ converts #RRGGBB to PIL-compatible integers"""
        colorstring = colorstring.strip()
        while colorstring[0] == '#': colorstring = colorstring[1:]
        # get bytes in reverse order to deal with PIL quirk
        colorstring = colorstring[-2:] + colorstring[2:4] + colorstring[:2]
        # finally, make it numeric
        color = int(colorstring, 16)
        return color

    def PILColorToRGB(self, pil_color):
        """ convert a PIL-compatible integer into an (r, g, b) tuple """
        hexstr = '%06x' % pil_color
        # reverse byte order
        r, g, b = hexstr[4:], hexstr[2:4], hexstr[:2]
        r, g, b = [int(n, 16) for n in (r, g, b)]
        return (r, g, b)

    def PILColorToHTMLColor(self, pil_integer):
        return RGBToHTMLColor(PILColorToRGB(pil_integer))

    def RGBToPILColor(self, rgb_tuple):
        return HTMLColorToPILColor(RGBToHTMLColor(rgb_tuple))


    def getRGBTupleFromImg(self, file_obj, coords=(0,0)):
        """ 
        Extract an #RRGGBB color string from given pixel coordinates
        in the given file-like object.
        """
        pil_img = Image.open(file_obj)
        pil_img = pil_img.convert('RGB')
        rgb = pil_img.getpixel(coords)
        return rgb


class Color(object):
    def __init__(self, ctx, *args):
        self._context = ctx
        params = len(args)
        color = ColorFactory(args)
        

    def __repr__(self):
        return "%s(%.3f, %.3f, %.3f, %.3f)" % (self.__class__.__name__, self.red,
                self.green, self.blue, self.alpha)
    

color = Color
